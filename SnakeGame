import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import javax.swing.*;

public class SnakeGame extends JPanel implements ActionListener, KeyListener {
    static final int SCREEN_WIDTH = 600;
    static final int SCREEN_HEIGHT = 600;
    static final int UNIT_SIZE = 25;
    static final int GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT) / (UNIT_SIZE * UNIT_SIZE);
    static final int DELAY = 120;

    final int x[] = new int[GAME_UNITS];
    final int y[] = new int[GAME_UNITS];
    int bodyParts = 6;
    int applesEaten;
    int appleX;
    int appleY;
    char direction = 'R';
    boolean running = false;
    Timer timer;
    Random random;

    public SnakeGame() {
        random = new Random();
        this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
        this.setBackground(Color.BLACK);
        this.setFocusable(true);
        this.addKeyListener(this);
        startGame();
    }

    public void startGame() {
        newApple();
        running = true;
        timer = new Timer(DELAY, this);
        timer.start();
    }

    public void newApple() {
        appleX = random.nextInt(SCREEN_WIDTH / UNIT_SIZE) * UNIT_SIZE;
        appleY = random.nextInt(SCREEN_HEIGHT / UNIT_SIZE) * UNIT_SIZE;
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        draw(g);
    }

    public void draw(Graphics g) {
        if (running) {
            Graphics2D g2 = (Graphics2D) g;

            // Gradient background
            GradientPaint gp = new GradientPaint(0, 0, new Color(10, 10, 30),
                                                 0, SCREEN_HEIGHT, new Color(40, 40, 60));
            g2.setPaint(gp);
            g2.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

            // Semi-transparent grid
            g2.setColor(new Color(50, 50, 80, 100));
            for (int i = 0; i < SCREEN_HEIGHT / UNIT_SIZE; i++) {
                g2.drawLine(i * UNIT_SIZE, 0, i * UNIT_SIZE, SCREEN_HEIGHT);
                g2.drawLine(0, i * UNIT_SIZE, SCREEN_WIDTH, i * UNIT_SIZE);
            }

            // Apple with glow
            g2.setColor(Color.RED);
            g2.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);
            g2.setColor(new Color(255, 100, 100, 120));
            g2.fillOval(appleX - 5, appleY - 5, UNIT_SIZE + 10, UNIT_SIZE + 10);

            // Snake with gradient, rounded edges, black eyes, and tongue
            for (int i = 0; i < bodyParts; i++) {
                float ratio = (float) i / bodyParts; // tail fades
                if (i == 0) {
                    // Head gradient
                    GradientPaint headGradient = new GradientPaint(x[i], y[i], new Color(0, 255, 0),
                                                                   x[i] + UNIT_SIZE, y[i] + UNIT_SIZE, new Color(0, 150, 0));
                    g2.setPaint(headGradient);
                    g2.fillRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);

                    // Eyes (black)
                    g2.setColor(Color.BLACK);
                    g2.fillOval(x[i] + 6, y[i] + 6, 4, 4);
                    g2.fillOval(x[i] + 15, y[i] + 6, 4, 4);

                    // Tongue
                    g2.setColor(Color.RED);
                    int tongueWidth = 4;
                    int tongueLength = 10;
                    switch (direction) {
                        case 'U': g2.fillRect(x[i] + UNIT_SIZE / 2 - tongueWidth / 2, y[i] - tongueLength, tongueWidth, tongueLength); break;
                        case 'D': g2.fillRect(x[i] + UNIT_SIZE / 2 - tongueWidth / 2, y[i] + UNIT_SIZE, tongueWidth, tongueLength); break;
                        case 'L': g2.fillRect(x[i] - tongueLength, y[i] + UNIT_SIZE / 2 - tongueWidth / 2, tongueLength, tongueWidth); break;
                        case 'R': g2.fillRect(x[i] + UNIT_SIZE, y[i] + UNIT_SIZE / 2 - tongueWidth / 2, tongueLength, tongueWidth); break;
                    }

                } else {
                    // Body gradient fading
                    int greenValue = 180 - (int) (ratio * 100);
                    g2.setColor(new Color(45, greenValue, 0));
                    g2.fillRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);
                }

                // Outline
                g2.setColor(new Color(0, 0, 0, 80));
                g2.drawRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);
            }

            // Score
            g.setColor(Color.WHITE);
            g.setFont(new Font("SansSerif", Font.BOLD, 20));
            g.drawString("Score: " + applesEaten, 10, 25);

        } else {
            gameOver(g);
        }
    }

    public void move() {
        for (int i = bodyParts; i > 0; i--) {
            x[i] = x[i - 1];
            y[i] = y[i - 1];
        }

        switch (direction) {
            case 'U': y[0] -= UNIT_SIZE; break;
            case 'D': y[0] += UNIT_SIZE; break;
            case 'L': x[0] -= UNIT_SIZE; break;
            case 'R': x[0] += UNIT_SIZE; break;
        }
    }

    public void checkApple() {
        if (x[0] == appleX && y[0] == appleY) {
            bodyParts += 6;
            applesEaten++;
            newApple();
        }
    }

    public void checkCollisions() {
        // head hits body
        for (int i = bodyParts; i > 0; i--) {
            if (x[0] == x[i] && y[0] == y[i]) running = false;
        }

        // head hits walls
        if (x[0] < 0 || x[0] >= SCREEN_WIDTH || y[0] < 0 || y[0] >= SCREEN_HEIGHT) running = false;

        if (!running) timer.stop();
    }

    public void gameOver(Graphics g) {
        // Score
        g.setColor(Color.WHITE);
        g.setFont(new Font("SansSerif", Font.BOLD, 28));
        FontMetrics metrics1 = getFontMetrics(g.getFont());
        g.drawString("Score: " + applesEaten, (SCREEN_WIDTH - metrics1.stringWidth("Score: " + applesEaten)) / 2, SCREEN_HEIGHT / 2 - 30);

        // Game Over text
        g.setColor(Color.RED);
        g.setFont(new Font("SansSerif", Font.BOLD, 48));
        FontMetrics metrics2 = getFontMetrics(g.getFont());
        g.drawString("Game Over", (SCREEN_WIDTH - metrics2.stringWidth("Game Over")) / 2, SCREEN_HEIGHT / 2 + 10);

        // Restart hint
        g.setColor(Color.LIGHT_GRAY);
        g.setFont(new Font("SansSerif", Font.PLAIN, 18));
        g.drawString("Press ENTER to restart", (SCREEN_WIDTH - getFontMetrics(g.getFont()).stringWidth("Press ENTER to restart")) / 2, SCREEN_HEIGHT / 2 + 50);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (running) {
            move();
            checkApple();
            checkCollisions();
        }
        repaint();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:  if (direction != 'R') direction = 'L'; break;
            case KeyEvent.VK_RIGHT: if (direction != 'L') direction = 'R'; break;
            case KeyEvent.VK_UP:    if (direction != 'D') direction = 'U'; break;
            case KeyEvent.VK_DOWN:  if (direction != 'U') direction = 'D'; break;
            case KeyEvent.VK_ENTER:
                if (!running) {
                    bodyParts = 6;
                    applesEaten = 0;
                    direction = 'R';
                    x[0] = SCREEN_WIDTH / 2;
                    y[0] = SCREEN_HEIGHT / 2;
                    for (int i = 1; i < x.length; i++) {
                        x[i] = 0;
                        y[i] = 0;
                    }
                    startGame();
                }
                break;
        }
    }

    @Override public void keyReleased(KeyEvent e) { }
    @Override public void keyTyped(KeyEvent e) { }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Snake Game");
        SnakeGame gamePanel = new SnakeGame();
        frame.add(gamePanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        // initial snake head position
        gamePanel.x[0] = SCREEN_WIDTH / 2;
        gamePanel.y[0] = SCREEN_HEIGHT / 2;
    }
}
