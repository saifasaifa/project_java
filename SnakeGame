import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import javax.swing.*;

public class SnakeGame extends JPanel implements ActionListener, KeyListener {

    static final int SCREEN_WIDTH = 600;
    static final int SCREEN_HEIGHT = 600;
    static final int UNIT_SIZE = 25;
    static final int GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT) / (UNIT_SIZE * UNIT_SIZE);
    static final int DELAY = 120;

    final int[] x = new int[GAME_UNITS];
    final int[] y = new int[GAME_UNITS];
    int bodyParts = 6;
    int applesEaten = 0;
    int appleX, appleY;
    char direction = 'R';
    boolean running = false;
    boolean inMenu = true;
    Timer timer;
    Random random;
    JButton playButton;

    public SnakeGame() {
        random = new Random();
        setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
        setBackground(Color.BLACK);
        setFocusable(true);
        setLayout(null);
        addKeyListener(this);

        playButton = new JButton("เล่นเกม");
        playButton.setBounds(SCREEN_WIDTH / 2 - 60, SCREEN_HEIGHT / 2 - 25, 120, 50);
        playButton.setFont(new Font("Tahoma", Font.BOLD, 24));
        playButton.setBackground(new Color(50, 200, 50));
        playButton.setFocusPainted(false);
        playButton.addActionListener(e -> startGame());
        add(playButton);
    }

    public void startGame() {
    inMenu = false;
    running = true;
    playButton.setVisible(false);
    bodyParts = 6;
    applesEaten = 0;
    direction = 'R';

    // Initialize snake head
    x[0] = SCREEN_WIDTH / 2;
    y[0] = SCREEN_HEIGHT / 2;

    // Initialize rest of the body at same position as head
    for (int i = 1; i < bodyParts; i++) {
        x[i] = x[0];
        y[i] = y[0];
    }

    newApple();
    timer = new Timer(DELAY, this);
    timer.start();
    requestFocusInWindow();
}

    public void newApple() {
    boolean onSnake;
    do {
        onSnake = false;
        appleX = random.nextInt(SCREEN_WIDTH / UNIT_SIZE) * UNIT_SIZE;
        appleY = random.nextInt(SCREEN_HEIGHT / UNIT_SIZE) * UNIT_SIZE;

        // Check if apple spawns on the snake
        for (int i = 0; i < bodyParts; i++) {
            if (x[i] == appleX && y[i] == appleY) {
                onSnake = true;
                break;
            }
        }
    } while (onSnake);
}


    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (inMenu && !running) drawMenu(g);
        else if (running) drawGame(g);
        else drawGameOver(g);
    }

    public void drawMenu(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        GradientPaint bg = new GradientPaint(0, 0, new Color(0, 50, 100),
                                             0, SCREEN_HEIGHT, new Color(0, 0, 30));
        g2.setPaint(bg);
        g2.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

        String title = "เกมงูเห่าหางกระดิ่ง";
        g2.setFont(new Font("Tahoma", Font.BOLD, 60));
        int titleX = (SCREEN_WIDTH - g2.getFontMetrics().stringWidth(title)) / 2;
        int titleY = SCREEN_HEIGHT / 2 - 100;
        g2.setColor(Color.GREEN);
        g2.drawString(title, titleX, titleY);

        String sub = "คลิก เล่นเกม หรือกด ENTER เพื่อเริ่ม";
        g2.setFont(new Font("Tahoma", Font.PLAIN, 24));
        int subX = (SCREEN_WIDTH - g2.getFontMetrics().stringWidth(sub)) / 2;
        g2.setColor(Color.WHITE);
        g2.drawString(sub, subX, titleY + 50);
    }

    public void drawGame(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;

        // Background with gradient
        GradientPaint bg = new GradientPaint(0, 0, new Color(10, 10, 30),
                                             0, SCREEN_HEIGHT, new Color(40, 40, 60));
        g2.setPaint(bg);
        g2.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

        // Draw grid
        g2.setColor(new Color(60, 60, 80, 80));
        for (int i = 0; i < SCREEN_HEIGHT / UNIT_SIZE; i++) {
            g2.drawLine(i * UNIT_SIZE, 0, i * UNIT_SIZE, SCREEN_HEIGHT);
            g2.drawLine(0, i * UNIT_SIZE, SCREEN_WIDTH, i * UNIT_SIZE);
        }

        // Apple with glow
        g2.setColor(Color.RED);
        g2.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);
        g2.setColor(new Color(255, 100, 100, 100));
        g2.fillOval(appleX - 5, appleY - 5, UNIT_SIZE + 10, UNIT_SIZE + 10);
        

        // Snake
        for (int i = 0; i < bodyParts; i++) {
            if (i == 0) { // head
                GradientPaint headGrad = new GradientPaint(x[i], y[i],
                        new Color(0, 255, 0), x[i] + UNIT_SIZE, y[i] + UNIT_SIZE, new Color(0, 150, 0));
                g2.setPaint(headGrad);
                g2.fillRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);

                // Eyes
                g2.setColor(Color.BLACK);
                g2.fillOval(x[i] + 6, y[i] + 6, 4, 4);
                g2.fillOval(x[i] + 15, y[i] + 6, 4, 4);

                // Tongue
                g2.setColor(Color.RED);
                int tW = 4, tL = 10;
                switch (direction) {
                    case 'U' -> g2.fillRect(x[i] + UNIT_SIZE / 2 - tW / 2, y[i] - tL, tW, tL);
                    case 'D' -> g2.fillRect(x[i] + UNIT_SIZE / 2 - tW / 2, y[i] + UNIT_SIZE, tW, tL);
                    case 'L' -> g2.fillRect(x[i] - tL, y[i] + UNIT_SIZE / 2 - tW / 2, tL, tW);
                    case 'R' -> g2.fillRect(x[i] + UNIT_SIZE, y[i] + UNIT_SIZE / 2 - tW / 2, tL, tW);
                }
            } else { // body
                float ratio = (float) i / bodyParts;
                int green = 180 - (int) (ratio * 100);
                g2.setColor(new Color(45, green, 0));
                g2.fillRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);
            }

            // Snake border (shiny)
            g2.setColor(new Color(0, 0, 0, 60));
            g2.drawRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);
        }

        // Yellow tip at tail
        if (bodyParts > 1) {
            g2.setColor(Color.YELLOW);
            g2.fillOval(x[bodyParts - 1], y[bodyParts - 1], UNIT_SIZE, UNIT_SIZE);
        }

        // Score
        g2.setColor(Color.WHITE);
        g2.setFont(new Font("Tahoma", Font.BOLD, 20));
        g2.drawString("คะแนน: " + applesEaten, 10, 25);
    }

    public void drawGameOver(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        g2.setPaint(new GradientPaint(0, 0, new Color(50, 0, 0),
                                      0, SCREEN_HEIGHT, Color.BLACK));
        g2.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

        String over = "เเตก!";
        g2.setFont(new Font("Tahoma", Font.BOLD, 60));
        int textX = (SCREEN_WIDTH - g2.getFontMetrics().stringWidth(over)) / 2;
        int textY = SCREEN_HEIGHT / 2 - 50;
        g2.setColor(Color.RED);
        g2.drawString(over, textX, textY);

        g2.setFont(new Font("Tahoma", Font.BOLD, 30));
        String score = "คะแนน: " + applesEaten;
        int scoreX = (SCREEN_WIDTH - g2.getFontMetrics().stringWidth(score)) / 2;
        g2.setColor(Color.WHITE);
        g2.drawString(score, scoreX, textY + 70);

        g2.setFont(new Font("Tahoma", Font.PLAIN, 20));
        String hint = "กด ENTER เพื่อเล่นอีกครั้ง | กด Q เพื่อออก";
        int hintX = (SCREEN_WIDTH - g2.getFontMetrics().stringWidth(hint)) / 2;
        g2.setColor(Color.LIGHT_GRAY);
        g2.drawString(hint, hintX, textY + 110);
    }

    public void move() {
        for (int i = bodyParts; i > 0; i--) {
            x[i] = x[i - 1];
            y[i] = y[i - 1];
        }
        switch (direction) {
            case 'U' -> y[0] -= UNIT_SIZE;
            case 'D' -> y[0] += UNIT_SIZE;
            case 'L' -> x[0] -= UNIT_SIZE;
            case 'R' -> x[0] += UNIT_SIZE;
        }
    }

    public void checkApple() {
    if (x[0] == appleX && y[0] == appleY) {
        // Store current tail position
        int tailX = x[bodyParts - 1];
        int tailY = y[bodyParts - 1];

        bodyParts += 3; // grow snake
        applesEaten++;
        newApple();

        // Initialize new segments at the previous tail position
        for (int i = bodyParts - 3; i < bodyParts; i++) {
            x[i] = tailX;
            y[i] = tailY;
        }
    }
}

    public void checkCollisions() {
        for (int i = bodyParts; i > 0; i--) {
            if (x[0] == x[i] && y[0] == y[i]) running = false;
        }
        if (x[0] < 0 || x[0] >= SCREEN_WIDTH || y[0] < 0 || y[0] >= SCREEN_HEIGHT)
            running = false;

        if (!running) timer.stop();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (running) {
            move();
            checkApple();
            checkCollisions();
        }
        repaint();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT -> { if (direction != 'R') direction = 'L'; }
            case KeyEvent.VK_RIGHT -> { if (direction != 'L') direction = 'R'; }
            case KeyEvent.VK_UP -> { if (direction != 'D') direction = 'U'; }
            case KeyEvent.VK_DOWN -> { if (direction != 'U') direction = 'D'; }
            case KeyEvent.VK_ENTER -> { if (!running) startGame(); }
            case KeyEvent.VK_Q -> { if (!running) System.exit(0); }
        }
    }

    @Override public void keyReleased(KeyEvent e) {}
    @Override public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("เกมงูเห่าหางกระดิ่ง");
        SnakeGame gamePanel = new SnakeGame();
        frame.add(gamePanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
