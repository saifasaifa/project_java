import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import javax.swing.*;

public class SnakeGame extends JPanel implements ActionListener, KeyListener {
    static final int SCREEN_WIDTH = 600;
    static final int SCREEN_HEIGHT = 600;
    static final int UNIT_SIZE = 25;
    static final int GAME_UNITS = (SCREEN_WIDTH * SCREEN_HEIGHT) / (UNIT_SIZE * UNIT_SIZE);
    static final int DELAY = 120;

    final int x[] = new int[GAME_UNITS];
    final int y[] = new int[GAME_UNITS];
    int bodyParts = 6;
    int applesEaten;
    int appleX;
    int appleY;
    char direction = 'R';
    boolean running = false;
    boolean inMenu = true;
    Timer timer;
    Random random;
    JButton playButton;

    public SnakeGame() {
        random = new Random();
        this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
        this.setBackground(Color.BLACK);
        this.setFocusable(true);
        this.setLayout(null);
        this.addKeyListener(this);

        playButton = new JButton("เล่นเกม");
        playButton.setBounds(SCREEN_WIDTH / 2 - 60, SCREEN_HEIGHT / 2 - 25, 120, 50);
        playButton.setFont(new Font("Tahoma", Font.BOLD, 24));
        playButton.setBackground(new Color(50, 200, 50));
        playButton.setForeground(Color.BLACK);
        playButton.setFocusPainted(false);
        playButton.addActionListener(e -> startGameFromMenu());
        this.add(playButton);
    }

    public void startGameFromMenu() {
        inMenu = false;
        running = true;
        playButton.setVisible(false);
        x[0] = SCREEN_WIDTH / 2;
        y[0] = SCREEN_HEIGHT / 2;
        bodyParts = 6;
        applesEaten = 0;
        direction = 'R';
        startGame();
        this.requestFocusInWindow();
    }

    public void startGame() {
        newApple();
        timer = new Timer(DELAY, this);
        timer.start();
    }

    public void newApple() {
        appleX = random.nextInt(SCREEN_WIDTH / UNIT_SIZE) * UNIT_SIZE;
        appleY = random.nextInt(SCREEN_HEIGHT / UNIT_SIZE) * UNIT_SIZE;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (inMenu && !running) {
            playButton.setVisible(true);
            drawMenu(g);
        } else {
            playButton.setVisible(false);
            draw(g);
        }
    }

    public void drawMenu(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        GradientPaint gp = new GradientPaint(0, 0, new Color(0, 50, 100),
                                             0, SCREEN_HEIGHT, new Color(0, 0, 30));
        g2.setPaint(gp);
        g2.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

        String title = "เกมงูเห่าหางกระดิ่ง";
        g2.setFont(new Font("Tahoma", Font.BOLD, 60));
        FontMetrics fm = g2.getFontMetrics();
        int tx = (SCREEN_WIDTH - fm.stringWidth(title)) / 2;
        int ty = SCREEN_HEIGHT / 2 - 100;

        g2.setColor(Color.DARK_GRAY);
        g2.drawString(title, tx + 4, ty + 4);
        g2.setColor(Color.GREEN);
        g2.drawString(title, tx, ty);

        g2.setFont(new Font("Tahoma", Font.PLAIN, 24));
        String sub = "คลิก เล่นเกม หรือกด ENTER เพื่อเริ่ม";
        fm = g2.getFontMetrics();
        g2.setColor(Color.WHITE);
        g2.drawString(sub, (SCREEN_WIDTH - fm.stringWidth(sub)) / 2, ty + 50);
    }

    public void draw(Graphics g) {
        if (running) {
            Graphics2D g2 = (Graphics2D) g;
            GradientPaint gp = new GradientPaint(0, 0, new Color(10, 10, 30),
                                                 0, SCREEN_HEIGHT, new Color(40, 40, 60));
            g2.setPaint(gp);
            g2.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

            g2.setColor(new Color(50, 50, 80, 100));
            for (int i = 0; i < SCREEN_HEIGHT / UNIT_SIZE; i++) {
                g2.drawLine(i * UNIT_SIZE, 0, i * UNIT_SIZE, SCREEN_HEIGHT);
                g2.drawLine(0, i * UNIT_SIZE, SCREEN_WIDTH, i * UNIT_SIZE);
            }

            // Draw apple
            g2.setColor(Color.RED);
            g2.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);
            g2.setColor(new Color(255, 100, 100, 120));
            g2.fillOval(appleX - 5, appleY - 5, UNIT_SIZE + 10, UNIT_SIZE + 10);

            // Draw snake
            for (int i = 0; i < bodyParts; i++) {
                float ratio = (float) i / bodyParts;
                if (i == 0) { // head
                    GradientPaint headGradient = new GradientPaint(x[i], y[i], new Color(0, 255, 0),
                                                                   x[i] + UNIT_SIZE, y[i] + UNIT_SIZE, new Color(0, 150, 0));
                    g2.setPaint(headGradient);
                    g2.fillRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);

                    g2.setColor(Color.BLACK); // eyes
                    g2.fillOval(x[i] + 6, y[i] + 6, 4, 4);
                    g2.fillOval(x[i] + 15, y[i] + 6, 4, 4);

                    g2.setColor(Color.RED); // tongue
                    int tongueWidth = 4;
                    int tongueLength = 10;
                    switch (direction) {
                        case 'U': g2.fillRect(x[i] + UNIT_SIZE / 2 - tongueWidth / 2, y[i] - tongueLength, tongueWidth, tongueLength); break;
                        case 'D': g2.fillRect(x[i] + UNIT_SIZE / 2 - tongueWidth / 2, y[i] + UNIT_SIZE, tongueWidth, tongueLength); break;
                        case 'L': g2.fillRect(x[i] - tongueLength, y[i] + UNIT_SIZE / 2 - tongueWidth / 2, tongueLength, tongueWidth); break;
                        case 'R': g2.fillRect(x[i] + UNIT_SIZE, y[i] + UNIT_SIZE / 2 - tongueWidth / 2, tongueLength, tongueWidth); break;
                    }
                } else { // body
                    int greenValue = 180 - (int) (ratio * 100);
                    g2.setColor(new Color(45, greenValue, 0));
                    g2.fillRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);
                }
                g2.setColor(new Color(0, 0, 0, 80));
                g2.drawRoundRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE, 15, 15);
            }

            // Draw yellow circle on tail tip
                        if (bodyParts > 1) {
                g2.setColor(Color.YELLOW);
                g2.fillOval(x[bodyParts - 1], y[bodyParts - 1], UNIT_SIZE, UNIT_SIZE);
            }

            g.setColor(Color.WHITE);
            g.setFont(new Font("Tahoma", Font.BOLD, 20));
            g.drawString("คะแนน: " + applesEaten, 10, 25);

        } else {
            drawGameOverMenu(g);
        }
    }

    public void drawGameOverMenu(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;

        GradientPaint gp = new GradientPaint(0, 0, new Color(50, 0, 0),
                                             0, SCREEN_HEIGHT, new Color(0, 0, 0));
        g2.setPaint(gp);
        g2.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);

        String text = "เเตก!";
        g2.setFont(new Font("Tahoma", Font.BOLD, 60));
        FontMetrics fm = g2.getFontMetrics();
        int tx = (SCREEN_WIDTH - fm.stringWidth(text)) / 2;
        int ty = SCREEN_HEIGHT / 2 - 50;

        g2.setColor(Color.DARK_GRAY);
        g2.drawString(text, tx + 4, ty + 4);
        g2.setColor(Color.RED);
        g2.drawString(text, tx, ty);

        String scoreText = "คะแนน: " + applesEaten;
        g2.setFont(new Font("Tahoma", Font.BOLD, 30));
        fm = g2.getFontMetrics();
        g2.setColor(Color.WHITE);
        g2.drawString(scoreText, (SCREEN_WIDTH - fm.stringWidth(scoreText)) / 2, ty + 70);

        String hint = "กด ENTER เพื่อเล่นอีกครั้ง | กด Q เพื่อออก";
        g2.setFont(new Font("Tahoma", Font.PLAIN, 20));
        fm = g2.getFontMetrics();
        g2.setColor(Color.LIGHT_GRAY);
        g2.drawString(hint, (SCREEN_WIDTH - fm.stringWidth(hint)) / 2, ty + 110);
    }

    public void move() {
        for (int i = bodyParts; i > 0; i--) {
            x[i] = x[i - 1];
            y[i] = y[i - 1];
        }
        switch (direction) {
            case 'U': y[0] -= UNIT_SIZE; break;
            case 'D': y[0] += UNIT_SIZE; break;
            case 'L': x[0] -= UNIT_SIZE; break;
            case 'R': x[0] += UNIT_SIZE; break;
        }
    }

    public void checkApple() {
        if (x[0] == appleX && y[0] == appleY) {
            bodyParts += 6;
            applesEaten++;
            newApple();
        }
    }

    public void checkCollisions() {
        for (int i = bodyParts; i > 0; i--) {
            if (x[0] == x[i] && y[0] == y[i]) running = false;
        }
        if (x[0] < 0 || x[0] >= SCREEN_WIDTH || y[0] < 0 || y[0] >= SCREEN_HEIGHT) running = false;
        if (!running) timer.stop();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (running) {
            move();
            checkApple();
            checkCollisions();
        }
        repaint();
    }

    @Override
    public void keyPressed(KeyEvent e) {
        switch (e.getKeyCode()) {
            case KeyEvent.VK_LEFT:  if (direction != 'R') direction = 'L'; break;
            case KeyEvent.VK_RIGHT: if (direction != 'L') direction = 'R'; break;
            case KeyEvent.VK_UP:    if (direction != 'D') direction = 'U'; break;
            case KeyEvent.VK_DOWN:  if (direction != 'U') direction = 'D'; break;
            case KeyEvent.VK_ENTER:
                if (!running) startGameFromMenu();
                break;
            case KeyEvent.VK_Q:
                if (!running) System.exit(0);
                break;
        }
    }

    @Override public void keyReleased(KeyEvent e) {}
    @Override public void keyTyped(KeyEvent e) {}

    public static void main(String[] args) {
        JFrame frame = new JFrame("เกมงูเห่าหางกระดิ่ง");
        SnakeGame gamePanel = new SnakeGame();
        frame.add(gamePanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setResizable(false);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }
}
